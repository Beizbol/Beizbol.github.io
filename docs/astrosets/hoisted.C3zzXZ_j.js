import"./hoisted.BrocnPgX.js";async function B(){const f=await fetch("/shaders/snek.wgsl");if(console.log("loadFragShader",f),!f.ok){console.error("Failed to load shader.");return}const P=await f.text(),h=document.getElementById("canvas-snek");if(!h)throw new Error("Canvas not found.");if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const I=await navigator.gpu.requestAdapter();if(!I)throw new Error("No appropriate GPUAdapter found.");const r=await I.requestDevice(),s=h.getContext("webgpu");if(!s)throw new Error("WebGPU context not found.");const c=navigator.gpu.getPreferredCanvasFormat();s.configure({device:r,format:c});const b=new Float32Array([-.8,-.8,.8,-.8,.8,.8,-.8,-.8,.8,.8,-.8,.8,-1,-1,1,-1,1,1,-1,-1,1,1,-1,1]),g=r.createBuffer({label:"Cell vertices",size:b.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(g,0,b);const _={arrayStride:8,attributes:[{format:"float32x2",offset:0,shaderLocation:0}]},G=r.createBindGroupLayout({label:"Cell Bind Group Layout",entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.COMPUTE,buffer:{}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]}),D=r.createPipelineLayout({label:"Bg Pipeline Layout",bindGroupLayouts:[]}),R=r.createPipelineLayout({label:"Cell Pipeline Layout",bindGroupLayouts:[G]}),d=r.createShaderModule({label:"Cell shader",code:P}),y=r.createRenderPipeline({label:"Bg pipeline",layout:D,vertex:{module:d,entryPoint:"bgVert",buffers:[_]},fragment:{module:d,entryPoint:"bgFrag",targets:[{format:c}]}}),x=r.createRenderPipeline({label:"Cell pipeline",layout:R,vertex:{module:d,entryPoint:"vertexMain",buffers:[_]},fragment:{module:d,entryPoint:"fragmentMain",targets:[{format:c}]}}),w=new Float32Array([32,32]),E=r.createBuffer({label:"Grid Uniforms",size:w.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(E,0,w);const a=new Uint32Array(32*32),u=r.createBuffer({label:"Grid State",size:a.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(u,0,a);const m=r.createBindGroup({label:"Cell renderer bind group A",layout:G,entries:[{binding:0,resource:{buffer:E}},{binding:1,resource:{buffer:u}}]}),e={facing:"right",step:0,toggle:!0,spawn:!1,head_idx:34,food_idx:32,snek:[]};function U(){for(let t=0;t<a.length;++t)a[t]=0;S(),a[e.head_idx-1]=3,e.snek.push(e.head_idx),e.snek.push(e.head_idx-1),a[e.head_idx]=3,r.queue.writeBuffer(u,0,a)}function S(){let t=0;do t=Math.floor(Math.random()*32*32);while(a[t]!==0);a[t]=4,e.food_idx=t,e.spawn=!1}function p(){switch(e.spawn&&S(),e.facing){case"up":{e.head_idx=(e.head_idx+32)%(32*32);break}case"down":{e.head_idx<32&&(e.head_idx+=32*32),e.head_idx=(e.head_idx-32)%(32*32);break}case"right":{e.head_idx=(e.head_idx+1)%(32*32);break}case"left":{e.head_idx=(e.head_idx-1)%(32*32);break}}for(let i=0;i<e.snek.length;i++)a[e.snek[i]]=3;if(a[e.head_idx]=2,e.snek.unshift(e.head_idx),e.head_idx!==e.food_idx){const i=e.snek.pop();a[i]=0}else e.spawn=!0;r.queue.writeBuffer(u,0,a),e.step++;const t=r.createCommandEncoder(),l=t.beginRenderPass({colorAttachments:[{view:s.getCurrentTexture().createView(),loadOp:"clear",clearValue:{r:0,g:.8,b:.8,a:1},storeOp:"store"}]});l.setPipeline(y),l.setVertexBuffer(0,g),l.draw(6,1,6),l.end();const o=t.beginRenderPass({colorAttachments:[{view:s.getCurrentTexture().createView(),loadOp:"load",clearValue:{r:0,g:0,b:0,a:0},storeOp:"store"}]});o.setPipeline(x),o.setBindGroup(0,m),o.setVertexBuffer(0,g),o.draw(6,32*32),o.end(),r.queue.submit([t.finish()])}document.addEventListener("keydown",t=>{switch(t.key){case"ArrowUp":case"w":{t.preventDefault(),e.facing="up";break}case"ArrowDown":case"s":{t.preventDefault(),e.facing="down";break}case"ArrowLeft":case"a":{t.preventDefault(),e.facing="left";break}case"ArrowRight":case"d":{t.preventDefault(),e.facing="right";break}case" ":{t.preventDefault(),n?(console.log("Pausing game"),clearInterval(n),n=null):(console.log("Starting game"),n=setInterval(p,200));break}}}),U(),p();let n=null;n=setInterval(p,200)}document.addEventListener("astro:page-load",B);
