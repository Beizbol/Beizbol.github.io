<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="color-scheme" content="dark light" />
        <title>Terminal</title>

        <style>
            /* Terminal */
            body {
                box-sizing: border-box;
                height: 100vh;
                margin: 0;
                padding: 0.5rem;
                background-image: var(--wallpaper);
                background-size: 100%;
                background-repeat: no-repeat;
                font-family: system-ui;
            }
            .app {
                width: 50%;
                height: 50%;
                border-radius: 0.25rem;
                border: 1px solid #333;
                box-shadow: #000c 0 0 0.5rem 0.5rem;
                margin: 0;
                padding: 0;
                box-sizing: border-box;

                left: 25%;
                isolation: isolate;
                background-color: #000;
            }

            .window {
                width: 100%;
                height: 100%;
                display: grid;
                grid-template-columns: 1fr;
                grid-template-rows: 2rem 1fr;
            }

            .appbar {
                border-radius: 0.15rem 0.15rem 0 0;
                display: flex;
                align-items: center;
                justify-content: space-between;
                background-color: #111;
                padding: 0;
                margin: 0;
            }

            .btnX {
                border: none;
                border-radius: 0 0.15rem 0 0;
                aspect-ratio: 1;
                height: 2rem;
                background-color: #111;
                /* opacity: 40%; */
            }

            .btnX:hover {
                background-color: #f00;
            }

            .content {
                width: 100%;
                height: 100%;
                position: relative;
            }
        </style>
    </head>
    <body>
        <p>try: <code>$ help</code></p>
        <dialog class="app" open>
            <div class="window">
                <header class="appbar">
                    <div class="fav"></div>
                    <p>Term App</p>
                    <form method="dialog">
                        <button class="btnX">&#x2715;</button>
                    </form>
                </header>
                <div class="content">
                    <div id="terminal"></div>
                </div>
            </div>
        </dialog>
    </body>

    <style is:inline>
        .xterm {
            cursor: text;
            position: relative;
            user-select: none;
            -ms-user-select: none;
            -webkit-user-select: none;
        }
        .xterm.focus,
        .xterm:focus {
            outline: 0;
        }
        .xterm .xterm-helpers {
            position: absolute;
            top: 0;
            z-index: 5;
        }
        .xterm .xterm-helper-textarea {
            padding: 0;
            border: 0;
            margin: 0;
            position: absolute;
            opacity: 0;
            left: -9999em;
            top: 0;
            width: 0;
            height: 0;
            z-index: -5;
            white-space: nowrap;
            overflow: hidden;
            resize: none;
        }
        .xterm .composition-view {
            background: #000;
            color: #fff;
            display: none;
            position: absolute;
            white-space: nowrap;
            z-index: 1;
        }
        .xterm .composition-view.active {
            display: block;
        }
        .xterm .xterm-viewport {
            background-color: #000;
            overflow-y: scroll;
            cursor: default;
            position: absolute;
            right: 0;
            left: 0;
            top: 0;
            bottom: 0;
        }
        .xterm .xterm-screen {
            position: relative;
        }
        .xterm .xterm-screen canvas {
            position: absolute;
            left: 0;
            top: 0;
        }
        .xterm .xterm-scroll-area {
            visibility: hidden;
        }
        .xterm-char-measure-element {
            display: inline-block;
            visibility: hidden;
            position: absolute;
            top: 0;
            left: -9999em;
            line-height: normal;
        }
        .xterm.enable-mouse-events {
            cursor: default;
        }
        .xterm .xterm-cursor-pointer,
        .xterm.xterm-cursor-pointer {
            cursor: pointer;
        }
        .xterm.column-select.focus {
            cursor: crosshair;
        }
        .xterm .xterm-accessibility:not(.debug),
        .xterm .xterm-message {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            right: 0;
            z-index: 10;
            color: transparent;
            pointer-events: none;
        }
        .xterm .xterm-accessibility-tree:not(.debug) ::selection {
            color: transparent;
        }
        .xterm .xterm-accessibility-tree {
            user-select: text;
            white-space: pre;
        }
        .xterm .live-region {
            position: absolute;
            left: -9999px;
            width: 1px;
            height: 1px;
            overflow: hidden;
        }
        .xterm-dim {
            opacity: 1 !important;
        }
        .xterm-underline-1 {
            text-decoration: underline;
        }
        .xterm-underline-2 {
            text-decoration: double underline;
        }
        .xterm-underline-3 {
            text-decoration: wavy underline;
        }
        .xterm-underline-4 {
            text-decoration: dotted underline;
        }
        .xterm-underline-5 {
            text-decoration: dashed underline;
        }
        .xterm-overline {
            text-decoration: overline;
        }
        .xterm-overline.xterm-underline-1 {
            text-decoration: overline underline;
        }
        .xterm-overline.xterm-underline-2 {
            text-decoration: overline double underline;
        }
        .xterm-overline.xterm-underline-3 {
            text-decoration: overline wavy underline;
        }
        .xterm-overline.xterm-underline-4 {
            text-decoration: overline dotted underline;
        }
        .xterm-overline.xterm-underline-5 {
            text-decoration: overline dashed underline;
        }
        .xterm-strikethrough {
            text-decoration: line-through;
        }
        .xterm-screen .xterm-decoration-container .xterm-decoration {
            z-index: 6;
            position: absolute;
        }
        .xterm-screen .xterm-decoration-container .xterm-decoration.xterm-decoration-top-layer {
            z-index: 7;
        }
        .xterm-decoration-overview-ruler {
            z-index: 8;
            position: absolute;
            top: 0;
            right: 0;
            pointer-events: none;
        }
        .xterm-decoration-top {
            z-index: 2;
            position: relative;
        }
    </style>

    <script>
        import Cli from "./cli";

        const fs = new FileSystem();
        const div_term = document.getElementById("terminal") as HTMLDivElement;
        const cli = new Cli(div_term, fs);
        function w(k: any) {
            switch (k) {
                case "\x7F":
                    term.write("\b \b");
                    buf.pop();
                    break;
                case "\r":
                    const args = buf.join("").split(" ");
                    console.log(args);
                    exe(args);
                    term.write(tag);
                    break;
                case arrow.left:
                    if (idx <= 0) break;
                    idx -= 1;
                    term.write(k);
                    break;
                case arrow.right:
                    if (idx >= buf.length) break;
                    idx += 1;
                    term.write(k);
                    break;
                case arrow.up:
                case arrow.down:
                    // console.log(k);
                    break;
                default:
                    term.write(k);
                    buf += k;
            }
        }

        const help_str = `
jOS help:
Test
cd
ls
`;

        function exe(argv: any) {
            console.log("argv: ");
            term.write("\r\n");
            switch (argv[0]) {
                case "close":
                case "exit":
                case "quit":
                case "reset":
                case "reboot":
                case "clr":
                case "clear":
                    term.clear();
                    break;
                case "echo":
                    const str = argv.slice(1).join(" ");
                    term.write(str);
                    break;
                case "help":
                    term.write(help_str);
                    break;
                //case "sf":
                case "cd":
                    cd(argv.slice(1));
                    break;
                case "dir":
                case "vf":
                case "ls":
                    ls(argv.slice(1));
                    break;
                case "copy":
                case "cp":
                    copy(argv.slice(1));
                    break;
                case "move":
                case "mv":
                    move(argv.slice(1));
                    break;
                case "rm":
                case "del":
                    del(argv.slice(1));
                    break;
                case "code":
                case "vscode":
                case "open":
                    code(argv.slice(1));
                    break;
                case "text":
                case "txt":
                case "write":
                case "notes":
                case "notepad":
                    notes(argv.slice(1));
                    break;
                default:
                    term.write("command not found. try: help");
            }
            buf = [""];
        }
    </script>
</html>
