---
const py_code = `
import random

def greet(name:str) -> None:
    num = random.randint(0, 101)
    print(f"hello {name}!")
    print(f"your lucky number is: {num}!")
`;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="dark light" />
    <title>jOS 0.1</title>

    <style>
      :root {
        --wallpaper: url("https://images.unsplash.com/photo-1736079428727-45d8a7d7ea0a?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D");
        --icon-start: url("/jos/start.svg");
        --icon-files: url("/jos/folder.svg");
        --icon-file: url("/jos/file.svg");
        --icon-text: url("/jos/doc.svg");
        --icon-img: url("/jos/img.svg");
        --icon-code: url("/jos/code.svg");
        --icon-notes: url("/jos/notepad.svg");
        --icon-term: url("/jos/term.svg");
        --icon-settings: url("/jos/settings.svg");
        --icon-trash-empty: url("/jos/trash-empty.svg");
        --icon-trash-full: url("/jos/trash-full.svg");
      }
      :root[data-icon-theme="win-11"] {
        --wallpaper: url("https://wallpaperaccess.com/full/7868571.jpg");
        --icon-start: url("/jos/start11.svg");
        --icon-files: url("/jos/files11.svg");
        --icon-file: url("/jos/file.svg");
        --icon-code: url("/jos/vscode.svg");
        --icon-notes: url("/jos/Notepad_11.svg");
        --icon-term: url("/jos/term11.svg");
        --icon-settings: url("/jos/settings11.svg");
        --icon-trash-empty: url("/jos/BinEmpty11.webp");
        --icon-trash-full: url("/jos/BinFull11.webp");
      }
      :root[data-icon-theme="win-10"] {
        --wallpaper: url("https://wallpaperaccess.com/full/1201088.jpg");
        --icon-start: url("/jos/start11.svg");
        --icon-files: url("/jos/files11.svg");
        --icon-file: url("/jos/file.svg");
        --icon-code: url("/jos/vscode.svg");
        --icon-notes: url("/jos/Notepad_11.svg");
        --icon-term: url("/jos/term11.svg");
        --icon-settings: url("/jos/settings11.svg");
        --icon-trash-empty: url("/jos/BinEmpty11.webp");
        --icon-trash-full: url("/jos/BinFull11.webp");
      }
      :root[data-icon-theme="win-xp"] {
        --wallpaper: url("https://wallpaperaccess.com/full/1536061.jpg");
        --icon-start: url("/jos/start98.svg");
        --icon-files: url("/jos/files98.svg");
        --icon-file: url("/jos/file.svg");
        --icon-code: url("/jos/code98.svg");
        --icon-notes: url("/jos/Notepad_98.svg");
        --icon-term: url("/jos/term98.svg");
        --icon-settings: url("/jos/settings98.svg");
        --icon-trash-empty: url("/jos/bin-empty-98.svg");
        --icon-trash-full: url("/jos/bin-full-98.svg");
      }

      body {
        box-sizing: border-box;
        height: 100vh;
        margin: 0;
        padding: 0.5rem;
        background-image: var(--wallpaper);
        background-size: 100%;
        background-repeat: no-repeat;
        font-family: system-ui;
      }

      .shortcut {
        background-color: #fff0;
        border-color: #fff0;
        aspect-ratio: 1;
        padding: 0.5rem;
        border-radius: 0.25rem;
      }

      .shortcut:hover {
        background-color: #fff2;
        /* border-color: #fff8; */
      }

      .shortcut:active {
        background-color: #fff4;
        border-color: #fff8;
      }

      .trash {
        width: 56px;
        height: 56px;
        background-size: contain;
        background-repeat: no-repeat;
      }

      .trash.empty {
        background-image: var(--icon-trash-empty);
      }

      .trash.full {
        background-image: var(--icon-trash-full);
      }

      .task {
        /* background-color: aquamarine; */
        background-repeat: no-repeat;
        background-size: contain;
        height: 3rem;
      }

      .img {
        background-image: var(--icon-img);
      }

      .text {
        background-image: var(--icon-text);
      }

      .file {
        background-image: var(--icon-file);
      }

      .files {
        background-image: var(--icon-files);
      }

      .start {
        background-image: var(--icon-start);
      }

      .term {
        background-image: var(--icon-term);
      }

      .notes {
        background-image: var(--icon-notes);
      }

      .code {
        background-image: var(--icon-code);
      }

      .settings {
        background-image: var(--icon-settings);
      }

      .taskbar {
        display: flex;
        gap: 0.1rem;
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: #111;
        border-top: 1px solid #333;
        height: 3rem;
        overflow: hidden;
        padding: 0.1rem;
      }

      .app,
      .menu {
        width: 50%;
        height: 50%;
        border-radius: 0.25rem;
        border: 1px solid #333;
        box-shadow: #000c 0 0 0.5rem 0.5rem;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        /* position: relative; */
      }

      .menu:popover-open {
        position: absolute;
        inset: unset;
        bottom: 4rem;
        left: 1rem;
        margin: 0;
        width: 50%;
        height: 50%;
        display: grid;
        gap: 1rem;
        justify-items: center;
      }

      .app {
        left: 25%;
        isolation: isolate;
        background-color: #000;
      }

      .window {
        width: 100%;
        height: 100%;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 2rem 1fr;
      }

      .appbar {
        border-radius: 0.15rem 0.15rem 0 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #111;
        padding: 0;
        margin: 0;
      }

      .btnX {
        border: none;
        border-radius: 0 0.15rem 0 0;
        aspect-ratio: 1;
        height: 2rem;
        background-color: #111;
        /* opacity: 40%; */
      }

      .btnX:hover {
        background-color: #f00;
      }

      .wrap select {
        padding: 0.5rem;
        font-size: large;
      }

      .wrap {
        padding: 1rem;
        display: flex;
        gap: 1rem;
        font-size: x-large;
        align-items: center;
      }

      .content {
        width: 100%;
        height: 100%;
        position: relative;
      }

      .jed {
        position: relative;
      }

      .txt {
        position: absolute;
        width: 100%;
        height: 100%;
        /* opacity: 50%; */
        box-sizing: border-box;
        border: 1px solid #333;
        padding: 1rem;
        font-size: larger;

        /* background-color: blueviolet; */
      }

      #editor {
        margin: 0;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        font-size: larger;
      }

      .checker {
        --check-color-a: #222;
        --check-color-b: #444;
        background: conic-gradient(var(--check-color-a) 90deg, var(--check-color-b) 90deg 180deg, var(--check-color-a) 180deg 270deg, var(--check-color-b) 270deg);
        background-size: 2rem 2rem;
        display: grid;
        place-items: center;
        overflow: hidden;
      }

      .viewer {
        --dx: 0;
        --dy: 0;
        --zebra: 50%;
        margin: 0;
        box-sizing: border-box;
        object-fit: contain;
        object-position: center;
        width: var(--zebra);
        height: var(--zebra);
      }
    </style>
  </head>
  <body id="dropZone" ondrop="dropFile(event);" ondragover="dragOver(event);">
    <button class="shortcut" id="trash">
      <div class="trash empty"></div>
      Trash
    </button>

    <footer class="taskbar">
      <button class="shortcut" popovertarget="start">
        <div class="start task"></div>
      </button>
      <button class="shortcut" onclick="files.show();apps.appendChild(apps.removeChild(files));">
        <div class="files task"></div>
      </button>
      <button class="shortcut" onclick="term.show();apps.appendChild(apps.removeChild(term));">
        <div class="term task"></div>
      </button>
      <button class="shortcut" onclick="notes.show();apps.appendChild(apps.removeChild(notes));">
        <div class="notes task"></div>
      </button>
      <button class="shortcut" onclick="code.show();apps.appendChild(apps.removeChild(code));">
        <div class="code task"></div>
      </button>
    </footer>

    <div popover id="start" class="menu">
      <h2>Start Menu</h2>
      <button class="shortcut" onclick="settings.show();apps.appendChild(apps.removeChild(settings));">
        <div class="settings task"></div>
      </button>
      <button class="shortcut" onclick="img.show();apps.appendChild(apps.removeChild(img));">
        <div class="img task"></div>
      </button>
    </div>

    <div id="apps">
      <dialog id="files" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p>Files App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
        </div>
      </dialog>

      <dialog id="audio" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p class="title">Audio App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
          <div class="content checker">
            <figure>
              <figcaption>Listen to the T-Rex:</figcaption>
              <audio controls src="https://upload.wikimedia.org/wikipedia/commons/7/76/Richard_Wagner_-_The_Valkyrie_-_Ride_of_the_Valkyries.flac"></audio>
              <a href="https://upload.wikimedia.org/wikipedia/commons/7/76/Richard_Wagner_-_The_Valkyrie_-_Ride_of_the_Valkyries.flac"> Download audio </a>
            </figure>
          </div>
        </div>
      </dialog>

      <dialog id="img" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p class="title">Image App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
          <div class="content checker">
            <img class="viewer" src="" alt="" />
          </div>
        </div>
      </dialog>

      <dialog id="vid" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p class="title">Video App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
          <div class="content checker">
            <video controls width="250" height="200" muted>
              <source src="/media/cc0-videos/flower.webm" type="video/webm" />
              <source src="/media/cc0-videos/flower.mp4" type="video/mp4" />
            </video>
          </div>
        </div>
      </dialog>

      <dialog id="term" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p>Term App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
          <div class="content">
            <div id="terminal"></div>
          </div>
        </div>
      </dialog>

      <dialog id="notes" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p class="title">Notes App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
          <div class="jed">
            <textarea name="txt" id="txt" class="txt">Testing testing 123</textarea>
          </div>
        </div>
      </dialog>

      <dialog id="code" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p>Code App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
          <div class="content">
            <pre id="editor">{py_code}</pre>
          </div>
        </div>
      </dialog>

      <dialog id="settings" class="app">
        <div class="window">
          <header class="appbar">
            <div class="fav"></div>
            <p>Settings App</p>
            <form method="dialog">
              <button class="btnX">&#x2715;</button>
            </form>
          </header>
          <div class="wrap">
            <label for="themes">Theme</label>
            <select name="themes" id="themes">
              <option value="jos" selected>Default</option>
              <option value="win-11">Win11</option>
              <!-- <option value="win-10">Win10</option> -->
              <option value="win-xp">WinXP</option>
            </select>
          </div>
        </div>
      </dialog>
    </div>
  </body>

  <script>
    let cwd = "";
    let zoom = 50;
    const img = document.getElementById("img") as HTMLDialogElement;
    img.addEventListener("wheel", (ev) => {
      const viewer = img.querySelector(".viewer") as HTMLImageElement;
      zoom += ev.deltaY / 100;
      viewer.style.setProperty("--zebra", zoom + "%");
    });

    function open_img(file: any) {
      console.log("img opening", file);
      const image = img.querySelector(".viewer") as HTMLImageElement;
      image.src = URL.createObjectURL(file);
      image.alt = image.title = file.name;
      const title = img.querySelector(".title") as HTMLDivElement;
      title.innerText = "Image App - " + file.name;
      img.show();
      const apps = document.getElementById("apps") as HTMLDivElement;
      apps.appendChild(apps.removeChild(img));
    }

    async function open_txt(file) {
      console.log("txt opening", file);
      const notes = document.getElementById("notes") as HTMLDialogElement;
      const title = notes.querySelector(".title") as HTMLDivElement;
      title.innerText = "Notes App - " + file.name;
      txt.value = await file.text();
      notes.show();
      apps.appendChild(apps.removeChild(notes));
    }

    function dropFile(ev) {
      // Prevent default behavior (Prevent file from being opened)
      ev.preventDefault();
      console.log("File(s) dropped", ev);
      var file = document.createElement("button");
      file.classList.add("shortcut");
      var icon = document.createElement("div");
      icon.classList.add("task");
      file.appendChild(icon);
      const _file = ev.dataTransfer.items[0].getAsFile();
      switch (_file.type) {
        case "text/plain":
          icon.classList.add("text");
          file.onclick = async () => {
            await open_txt(_file);
          };
          break;
        case "image/png":
          icon.classList.add("img");
          file.onclick = () => {
            open_img(_file);
          };
          break;
        default:
          icon.classList.add("file");
          break;
      }
      // const filename = ev.dataTransfer
      // console.log("file: ", _file);
      file.insertAdjacentText("beforeend", _file.name);
      document.querySelector(".shortcut").insertAdjacentElement("afterend", file);
    }

    function dragOver(ev) {
      // Prevent default behavior (Prevent file from being opened)
      ev.preventDefault();
      // console.log("File(s) in drop zone");
    }

    themes.addEventListener("change", (e) => {
      // const
      console.log("theme: ", e.target.value);
      document.documentElement.dataset.iconTheme = e.target.value;
    });

    document.querySelectorAll(".app").forEach((app, k, p) => {
      const bar = app.querySelector(".appbar");
      const btnX = app.querySelector(".btnX");
      btnX.onmouseup = () => {
        console.log("btn x", btnX);
        app.close();
      };
      document.onmouseup = (e) => {
        // console.log("Bar Up");
        document.onmousemove = null;
      };
      bar.onmousedown = (e) => {
        e.preventDefault();
        console.log("Bar Down");
        let off_x = e.clientX - bar.getBoundingClientRect().left;
        let off_y = e.clientY - bar.getBoundingClientRect().top;
        console.log("off:", off_x, off_y);
        apps.appendChild(apps.removeChild(app));
        // call a function whenever the cursor moves:
        document.onmousemove = (ev) => {
          ev.preventDefault();
          console.log("Mouse Move");
          app.style.left = ev.clientX - off_x + "px";
          app.style.top = ev.clientY - off_y + "px";
        };
      };
      app.onmousedown = (e) => {
        // e.preventDefault();
        console.log("App down");
        // apps.appendChild(apps.removeChild(app));
      };
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/ace-builds@1.37.3/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>

  <script>
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/dracula");
    editor.session.setMode("ace/mode/python");
  </script>

  <style is:inline>
    .xterm {
      cursor: text;
      position: relative;
      user-select: none;
      -ms-user-select: none;
      -webkit-user-select: none;
    }
    .xterm.focus,
    .xterm:focus {
      outline: 0;
    }
    .xterm .xterm-helpers {
      position: absolute;
      top: 0;
      z-index: 5;
    }
    .xterm .xterm-helper-textarea {
      padding: 0;
      border: 0;
      margin: 0;
      position: absolute;
      opacity: 0;
      left: -9999em;
      top: 0;
      width: 0;
      height: 0;
      z-index: -5;
      white-space: nowrap;
      overflow: hidden;
      resize: none;
    }
    .xterm .composition-view {
      background: #000;
      color: #fff;
      display: none;
      position: absolute;
      white-space: nowrap;
      z-index: 1;
    }
    .xterm .composition-view.active {
      display: block;
    }
    .xterm .xterm-viewport {
      background-color: #000;
      overflow-y: scroll;
      cursor: default;
      position: absolute;
      right: 0;
      left: 0;
      top: 0;
      bottom: 0;
    }
    .xterm .xterm-screen {
      position: relative;
    }
    .xterm .xterm-screen canvas {
      position: absolute;
      left: 0;
      top: 0;
    }
    .xterm .xterm-scroll-area {
      visibility: hidden;
    }
    .xterm-char-measure-element {
      display: inline-block;
      visibility: hidden;
      position: absolute;
      top: 0;
      left: -9999em;
      line-height: normal;
    }
    .xterm.enable-mouse-events {
      cursor: default;
    }
    .xterm .xterm-cursor-pointer,
    .xterm.xterm-cursor-pointer {
      cursor: pointer;
    }
    .xterm.column-select.focus {
      cursor: crosshair;
    }
    .xterm .xterm-accessibility:not(.debug),
    .xterm .xterm-message {
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      right: 0;
      z-index: 10;
      color: transparent;
      pointer-events: none;
    }
    .xterm .xterm-accessibility-tree:not(.debug) ::selection {
      color: transparent;
    }
    .xterm .xterm-accessibility-tree {
      user-select: text;
      white-space: pre;
    }
    .xterm .live-region {
      position: absolute;
      left: -9999px;
      width: 1px;
      height: 1px;
      overflow: hidden;
    }
    .xterm-dim {
      opacity: 1 !important;
    }
    .xterm-underline-1 {
      text-decoration: underline;
    }
    .xterm-underline-2 {
      text-decoration: double underline;
    }
    .xterm-underline-3 {
      text-decoration: wavy underline;
    }
    .xterm-underline-4 {
      text-decoration: dotted underline;
    }
    .xterm-underline-5 {
      text-decoration: dashed underline;
    }
    .xterm-overline {
      text-decoration: overline;
    }
    .xterm-overline.xterm-underline-1 {
      text-decoration: overline underline;
    }
    .xterm-overline.xterm-underline-2 {
      text-decoration: overline double underline;
    }
    .xterm-overline.xterm-underline-3 {
      text-decoration: overline wavy underline;
    }
    .xterm-overline.xterm-underline-4 {
      text-decoration: overline dotted underline;
    }
    .xterm-overline.xterm-underline-5 {
      text-decoration: overline dashed underline;
    }
    .xterm-strikethrough {
      text-decoration: line-through;
    }
    .xterm-screen .xterm-decoration-container .xterm-decoration {
      z-index: 6;
      position: absolute;
    }
    .xterm-screen .xterm-decoration-container .xterm-decoration.xterm-decoration-top-layer {
      z-index: 7;
    }
    .xterm-decoration-overview-ruler {
      z-index: 8;
      position: absolute;
      top: 0;
      right: 0;
      pointer-events: none;
    }
    .xterm-decoration-top {
      z-index: 2;
      position: relative;
    }
  </style>

  <script>
    import { Terminal } from "@xterm/xterm";
    
    const arrow = {
        up: "[A",
        down: "[B",
        left: "[C",
        right: "[D",
    };

    const tag = "\r\n$ ";
    var term = new Terminal();
    const terminal = document.getElementById("terminal") as HTMLDivElement;
    term.open(terminal);

    term.onData((e) => w(e));
    var buf = "".split("");
    var idx = 0;
    function w(k: any) {
      switch (k) {
        case "\x7F":
          term.write("\b \b");
          buf.pop();
          break;
        case "\r":
          const args = buf.join("").split(" ");
          console.log(args);
          exe(args);
          term.write(tag);
          break;
        case arrow.left:
          if (idx <= 0) break;
          idx -= 1;
          term.write(k);
          break;
        case arrow.right:
          if (idx >= buf.length) break;
          idx += 1;
          term.write(k);
          break;
        case arrow.up:
        case arrow.down:
          // console.log(k);
          break;
        default:
          term.write(k);
          buf += k;
      }
    }

    const help_str = `
jOS help:
Test
cd
ls
`;

    function exe(argv: any) {
      console.log("argv: ");
      term.write("\r\n");
      switch (argv[0]) {
        case "close":
        case "exit":
        case "quit":
        case "reset":
        case "reboot":
        case "clr":
        case "clear":
          term.clear();
          break;
        case "echo":
          const str = argv.slice(1).join(" ");
          term.write(str);
          break;
        case "help":
          term.write(help_str);
          break;
        //case "sf":
        case "cd":
          cd(argv.slice(1));
          break;
        case "dir":
        case "vf":
        case "ls":
          ls(argv.slice(1));
          break;
        case "copy":
        case "cp":
          copy(argv.slice(1));
          break;
        case "move":
        case "mv":
          move(argv.slice(1));
          break;
        case "rm":
        case "del":
          del(argv.slice(1));
          break;
        case "code":
        case "vscode":
        case "open":
          code(argv.slice(1));
          break;
        case "text":
        case "txt":
        case "write":
        case "notes":
        case "notepad":
          notes(argv.slice(1));
          break;
        default:
          term.write("command not found. try: help");
      }
      buf = [""];
    }
  </script>
</html>
