---
import Page from "../../../layouts/Page.astro";
---

<Page title="2 Web 2 GPU">
    <div class="wrap">
        <canvas width="512" height="512" id="canvas-quad"></canvas>
    </div>
</Page>

<style>
    .wrap {
        display: grid;
        place-items: center;
    }
</style>

<script>
    async function init_quads() {
        const res = await fetch("/shaders/quads.wgsl");
        console.log("loadFragShader", res);
        if (!res.ok) {
            console.error("Failed to load shader.");
            return;
        }
        const cellShaderCode = await res.text();

        const canvas = document.getElementById("canvas-quad") as HTMLCanvasElement;
        if (!canvas) {
            console.error("Canvas not found.");
            return;
        }

        if (!navigator.gpu) {
            console.error("WebGPU not supported on this browser.");
            return;
        }
        const adapter = await navigator.gpu.requestAdapter();
        if (!adapter) {
            console.error("No appropriate GPUAdapter found.");
            return;
        }
        const canvasFormat = navigator.gpu.getPreferredCanvasFormat();
        if (!canvasFormat) {
            console.error("No appropriate CanvasFormat found.");
            return;
        }
        const device = await adapter.requestDevice();
        const context = canvas.getContext("webgpu") as GPUCanvasContext;
        if (!context) {
            console.error("WebGPU context not supported on this browser.");
            return;
        }
        context.configure({
            device: device,
            format: canvasFormat,
        });

        const GRID_SIZE = 32;

        const vertices = new Float32Array([
            //   X,    Y,
            -0.8,
            -0.8, // Triangle 1 (Blue)
            0.8,
            -0.8,
            0.8,
            0.8,

            -0.8,
            -0.8, // Triangle 2 (Red)
            0.8,
            0.8,
            -0.8,
            0.8,
        ]);

        const vertexBuffer = device.createBuffer({
            label: "Cell vertices",
            size: vertices.byteLength,
            usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
        });

        device.queue.writeBuffer(vertexBuffer, /*bufferOffset=*/ 0, vertices);

        const vertexBufferLayout = {
            arrayStride: 8,
            attributes: [
                {
                    format: "float32x2",
                    offset: 0,
                    shaderLocation: 0, // Position, see vertex shader
                },
            ],
        } as GPUVertexBufferLayout;

        const cellShaderModule = device.createShaderModule({
            label: "Cell shader",
            code: cellShaderCode,
        });

        const cellPipeline = device.createRenderPipeline({
            label: "Cell pipeline",
            layout: "auto",
            vertex: {
                module: cellShaderModule,
                entryPoint: "vertexMain",
                buffers: [vertexBufferLayout],
            },
            fragment: {
                module: cellShaderModule,
                entryPoint: "fragmentMain",
                targets: [
                    {
                        format: canvasFormat,
                    },
                ],
            },
        });

        // Create a uniform buffer that describes the grid.
        const uniformArray = new Float32Array([GRID_SIZE, GRID_SIZE]);
        const uniformBuffer = device.createBuffer({
            label: "Grid Uniforms",
            size: uniformArray.byteLength,
            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
        });
        device.queue.writeBuffer(uniformBuffer, 0, uniformArray);

        const bindGroup = device.createBindGroup({
            label: "Cell renderer bind group",
            layout: cellPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: { buffer: uniformBuffer },
                },
            ],
        });

        const encoder = device.createCommandEncoder();
        const pass = encoder.beginRenderPass({
            colorAttachments: [
                {
                    view: context.getCurrentTexture().createView(),
                    loadOp: "clear",
                    clearValue: { r: 0, g: 0, b: 0.4, a: 1 }, // New line
                    storeOp: "store",
                },
            ],
        });
        pass.setPipeline(cellPipeline);
        pass.setVertexBuffer(0, vertexBuffer);
        pass.setBindGroup(0, bindGroup);
        pass.draw(vertices.length / 2, GRID_SIZE * GRID_SIZE); // 6 vertices
        pass.end();
        // Finish the command buffer and immediately submit it.
        device.queue.submit([encoder.finish()]);
    }
    document.addEventListener("astro:page-load", init_quads);
</script>
