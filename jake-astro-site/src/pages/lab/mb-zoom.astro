---
import Page from "../../layouts/Page.astro";
---

<Page title="The Mandelbrot Set">
    <div class="wrap">
        <canvas id="canvas"></canvas>
        <div class="flex">
            <p>Click and drag to pan</p>
            <button id="zoom-out">Zoom -</button>
            <button id="zoom-in">Zoom +</button>
        </div>
    </div>
</Page>

<style>
    .flex {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
    }

    .wrap {
        display: grid;
        place-items: center;
        overflow: hidden;
        background-color: #000;
        justify-content: center;
    }

    canvas {
        background-color: #000;
        width: 600px;
        height: 400px;
    }
</style>

<script>
    function init() {
        const canvas = document.getElementById("canvas") as HTMLCanvasElement;
        const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
        const max_depth = 50;
        let zoom = 1.5;
        const bound = 2;
        let mouse_x = 0;
        let mouse_y = 0;
        let dx = 0;
        let dy = 0;

        canvas.addEventListener("mousedown", (e) => {
            mouse_x = e.clientX;
            mouse_y = e.clientY;
        });

        canvas.addEventListener("mouseup", (e) => {
            dx = e.clientX - mouse_x;
            dy = e.clientY - mouse_y;
            draw();
        });

        const zoom_in = document.getElementById("zoom-in") as HTMLButtonElement;
        const zoom_out = document.getElementById(
            "zoom-out",
        ) as HTMLButtonElement;

        zoom_in.addEventListener("click", () => {
            zoom += 0.5;
            scaleCanvas();
        });

        zoom_out.addEventListener("click", () => {
            zoom -= 0.5;
            scaleCanvas();
        });

        function fmb(cx: number, cy: number) {
            let zx = 0;
            let zy = 0;
            let n = 0;
            while (++n < max_depth) {
                const z2y = 2 * zx * zy;
                zx = zx * zx - zy * zy + cx;
                zy = z2y + cy;
                const d = zx * zx + zy * zy;
                if (d > 4.0) {
                    break;
                }
            }
            return n;
        }

        function scaleCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            ctx.scale(zoom, zoom);
            draw();
        }

        function draw() {
            console.log("draw");
            ctx.fillStyle = "#000";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.translate(dx, dy);
            const k = bound / canvas.height;
            const step = 1 / zoom;
            for (let x = 0; x < canvas.width; x += step) {
                for (let y = 0; y < canvas.height; y += step) {
                    const cx = 1 * k * x - bound;
                    const cy = 1.25 * k * y - 0.625 * bound;
                    const n = fmb(cx, cy);
                    // console.log(n);
                    if (n === max_depth) {
                        ctx.fillStyle = "#FFF";
                    } else {
                        ctx.fillStyle = `rgb(0,${4 * n},0)`;
                    }

                    ctx.fillRect(x, y, 1, 1);
                }
            }
        }
        scaleCanvas();
        // draw();
    }
    document.addEventListener("astro:page-load", init);
</script>
