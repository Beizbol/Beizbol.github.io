---
import Page from "../../../layouts/Page.astro";
---

<Page title="Bounce">
  <div id="wrap">
    <canvas id="canvas" width="600" height="400"> </canvas>
    <div id="pause">&#x23F8</div>
    <div id="play">&#x23F5</div>
  </div>
  <h3 id="bounces"></h3>
  <p>Note: click/tap to pause</p>
</Page>
<script>
  const canvas = document.getElementById("canvas") as HTMLCanvasElement;
  const play = document.getElementById("play");
  const bounces = document.getElementById("bounces");
  const ctx = canvas.getContext("2d", { alpha: false });

  let state = {
    running: true,
    x: 0,
    y: 0,
    dx: 3,
    dy: -3,
    bounces: 0,
    color: "hsl(0 100% 70%)",
    frame: 0,
  };

  function init() {
    if (!ctx) {
      console.error("Canavas not supported :(");
      return;
    }
    const dpr = window.devicePixelRatio;
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width * dpr;
    canvas.height = rect.height * dpr;
    ctx.scale(dpr, dpr);
    state.x = canvas.width / 2;
    state.y = canvas.height - 25;

    canvas.addEventListener("click", (ev) => {
      if (state.running) {
        pause();
      } else {
        nextFrame();
      }
    });

    play.addEventListener("click", (ev) => {
      if (state.running) {
        pause();
      } else {
        nextFrame();
      }
    });

    nextFrame();
  }

  function nextFrame() {
    console.log("next");
    state.running = true;
    canvas.classList.remove("paused");
    state.frame = window.requestAnimationFrame(draw);
  }

  function pause() {
    console.log("pause");
    state.running = false;
    canvas.classList.add("paused");
    window.cancelAnimationFrame(state.frame);
  }

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBall();
    state.x += state.dx;
    state.y += state.dy;

    if (state.y + state.dy > canvas.height - 5 || state.y + state.dy < 5) {
      state.dy *= -1;
      state.bounces += 1;
    }

    if (state.x + state.dx > canvas.width - 5 || state.x + state.dx < 5) {
      state.dx *= -1;
      state.bounces += 1;
    }

    bounces.innerText = `Bounces: ${state.bounces}`;
    state.color = `hsl(${state.bounces % 255} 100% 70%)`;

    nextFrame();
  }

  function drawBall() {
    ctx.beginPath();
    ctx.arc(state.x, state.y, 10, 0, Math.PI * 2);
    ctx.fillStyle = state.color;
    ctx.fill();
    ctx.closePath();
  }

  init();
</script>
<style>
  #canvas {
    margin: auto;
  }

  #wrap {
    display: grid;
    width: 100%;
    height: 400px;
    background-color: darkslateblue;
  }

  #play,
  #pause {
    opacity: 0;
    display: grid;
    position: absolute;
    top: 200px;
    left: 50%;
    transform: translate(-50%, 50%);
    width: 4rem;
    height: 4rem;
    border-radius: 0.5rem;
    z-index: 9;
    justify-content: center;
    margin: auto;
    user-select: none;
    font-size: 2.5rem;
    background-color: #111;
  }

  #wrap:active #play,
  #wrap:active #pause {
    color: aqua;
  }

  #wrap:hover #play {
    opacity: 0;
  }

  #wrap:hover #pause {
    opacity: 0.69;
  }

  #wrap:hover #canvas.paused ~ #play {
    opacity: 0.69;
  }

  #wrap:hover #canvas.paused ~ #pause {
    opacity: 0;
  }
</style>
