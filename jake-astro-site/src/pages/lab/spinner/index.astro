---
import Page from "../../../layouts/Page.astro";
---

<Page title="Slots">
    <div class="wrap">
        <div class="flex">
            <button id="spin" class="go">Spin</button>
            <div>
                <input type="checkbox" id="xray" />
                <label for="xray"> Show Inner Workings</label>
            </div>
            <a href="/lab/points">points</a>
            <div id="pts"></div>
            <button id="add-pts">Add</button>
        </div>
        <div id="stage" class="perspective-on">
            <div id="rotate">
                <div id="ring1" class="ring"></div>
                <div id="ring2" class="ring"></div>
                <div id="ring3" class="ring"></div>
                <div id="ring4" class="ring"></div>
                <div id="ring5" class="ring"></div>
            </div>
        </div>
    </div>
</Page>
<script>
    function init() {
        if (loaded) {
            console.log("already loaded");
            return;
        }

        function add() {
            let points = localStorage.getItem("points");
            if (!points) {
                points = "0";
            }
            const ptsNum = parseInt(points);
            const newPts = ptsNum + 100;
            localStorage.setItem("points", newPts.toString());
            pts.innerHTML = newPts.toString();
        }

        const pts = document.getElementById("pts") as HTMLElement;
        const addPts = document.getElementById("add-pts") as HTMLButtonElement;
        addPts.addEventListener("click", add);

        let points = localStorage.getItem("points");
        if (!points) {
            points = "0";
        }
        pts.innerText = points;
        const loaded = true;
    }

    init();
    document.addEventListener("astro:after-swap", () => {
        console.log("astro page load");
        init();
    });
</script>
<script>
    const SLOTS_PER_REEL = 12;
    // radius = Math.round( ( panelWidth / 2) / Math.tan( Math.PI / SLOTS_PER_REEL ) );
    // current settings give a value of 149, rounded to 150
    const REEL_RADIUS = 150;

    const rotate = document.getElementById("rotate") as HTMLElement;
    const xray = document.getElementById("xray") as HTMLInputElement;
    xray.addEventListener("click", toggle_xray);

    const btnSpin = document.getElementById("spin") as HTMLButtonElement;
    btnSpin.addEventListener("click", spin);

    const ring1 = document.getElementById("ring1") as HTMLElement;
    const ring2 = document.getElementById("ring2") as HTMLElement;
    const ring3 = document.getElementById("ring3") as HTMLElement;
    const ring4 = document.getElementById("ring4") as HTMLElement;
    const ring5 = document.getElementById("ring5") as HTMLElement;

    function createSlots(ring: any) {
        var slotAngle = 360 / SLOTS_PER_REEL;

        var seed = getSeed();

        for (var i = 0; i < SLOTS_PER_REEL; i++) {
            const slot = document.createElement("div");

            slot.classList.add("slot");

            // compute and assign the transform for this slot
            const transform =
                "rotateX(" +
                slotAngle * i +
                "deg) translateZ(" +
                REEL_RADIUS +
                "px)";

            slot.style.transform = transform;

            // setup the number to show inside the slots the position is randomized to
            slot.innerHTML = "<p>" + ((seed + i) % 12) + "</p>";

            // add the poster to the row
            ring.appendChild(slot);
        }
    }

    function getSeed() {
        // generate random number smaller than 13 then floor it to settle between 0 and 12 inclusive
        return Math.floor(Math.random() * SLOTS_PER_REEL);
    }

    function spin() {
        //var txt = 'seeds: ';
        const rings = document.querySelectorAll(".ring");

        for (var i = 0; i < rings.length; i++) {
            const ring = rings[i] as HTMLElement;
            const old = ring.attributes.getNamedItem("seed")?.value as string;
            const oldSeed = parseInt(old);
            console.log(oldSeed);

            let seed = getSeed();
            while (oldSeed == seed) {
                seed = getSeed();
            }

            ring.style.animation =
                "back-spin 1s, spin-" + seed + " " + (3 + i * 0.5) + "s";

            ring.classList.add("spin-" + seed);
        }

        console.log("=====");
    }

    function toggleTilt() {
        if (rotate.classList.contains("tilted")) {
            rotate.classList.remove("tilted");
        } else {
            rotate.classList.add("tilted");
        }
    }

    function toggle_xray() {
        //var isChecked = $('#xray:checked');

        if (xray.checked) {
            document.querySelectorAll(".slot").forEach((slot) => {
                slot.classList.add("backface-on");
            });
            rotate.style.animation = "tiltin 2s 1";
            setTimeout(toggleTilt, 2000);
            return;
        }

        rotate.style.animation = "tiltout 2s 1";
        setTimeout(function () {
            toggleTilt();
            document.querySelectorAll(".slot").forEach((slot) => {
                if (slot.classList.contains("backface-on")) {
                    slot.classList.remove("backface-on");
                }
            });
        }, 1900);
    }

    function init() {
        // initiate slots
        createSlots(ring1);
        createSlots(ring2);
        createSlots(ring3);
        createSlots(ring4);
        createSlots(ring5);
    }

    init();
</script>

<style is:inline>
    .flex {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .wrap {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1rem;
    }

    #stage {
        margin: 0 auto;
        width: 600px;
        height: 400px;
        padding: 0 0 40px;
    }

    .perspective-on {
        -webkit-perspective: 1000px;
        -moz-perspective: 1000px;
        perspective: 1000px; /* Setting the perspective of the contents of the stage but not the stage itself*/
    }
    .perspective-off {
        -webkit-perspective: 0;
        -moz-perspective: 0;
        perspective: 0;
    }

    #rotate {
        margin: 0 auto 0;
        width: 450px;
        height: 220px;
        padding-top: 200px;
        /* Ensure that we're in 3D space */
        transform-style: preserve-3d;
    }

    .ring {
        margin: 0 auto;
        height: 80px;
        width: 90px;
        float: left;
        transform-style: preserve-3d;
    }

    .slot {
        position: absolute;
        width: 90px;
        height: 80px;
        box-sizing: border-box;
        opacity: 0.9;
        color: rgba(0, 0, 0, 0.9);
        background-color: #fff;
        border: solid 2px #000;
        -webkit-backface-visibility: hidden;
        -moz-backface-visibility: hidden;
        backface-visibility: hidden;
    }

    .backface-on {
        -webkit-backface-visibility: visible;
        -moz-backface-visibility: visible;
        backface-visibility: visible;
    }

    .slot p {
        font-size: 36px;
        font-weight: bold;
        line-height: 80px;
        margin: 0;
        text-align: center;
    }

    .go {
        display: block;

        padding: 10px 30px;
        font-size: 20px;
        cursor: pointer;
    }
    input,
    label {
        cursor: pointer;
    }
    .tilted {
        transform: rotateY(45deg);
    }
    /*=====*/
    .spin-0 {
        transform: rotateX(-3719deg);
    }
    .spin-1 {
        transform: rotateX(-3749deg);
    }
    .spin-2 {
        transform: rotateX(-3779deg);
    }
    .spin-3 {
        transform: rotateX(-3809deg);
    }
    .spin-4 {
        transform: rotateX(-3839deg);
    }
    .spin-5 {
        transform: rotateX(-3869deg);
    }
    .spin-6 {
        transform: rotateX(-3899deg);
    }
    .spin-7 {
        transform: rotateX(-3929deg);
    }
    .spin-8 {
        transform: rotateX(-3959deg);
    }
    .spin-9 {
        transform: rotateX(-3989deg);
    }
    .spin-10 {
        transform: rotateX(-4019deg);
    }
    .spin-11 {
        transform: rotateX(-4049deg);
    }
    /*=====*/
    @keyframes back-spin {
        /*0%    { transform: rotateX(0deg); }*/
        100% {
            transform: rotateX(30deg);
        }
    }
    @keyframes tiltin {
        0% {
            transform: rotateY(0deg);
        }
        50% {
            transform: rotateY(0deg);
        }
        100% {
            transform: rotateY(45deg);
        }
    }
    @keyframes tiltout {
        0% {
            transform: rotateY(45deg);
        }
        100% {
            transform: rotateY(0deg);
        }
    }

    @keyframes spin-0 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3719deg);
        }
    }
    @keyframes spin-1 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3749deg);
        }
    }
    @keyframes spin-2 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3779deg);
        }
    }
    @keyframes spin-3 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3809deg);
        }
    }
    @keyframes spin-4 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3839deg);
        }
    }
    @keyframes spin-5 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3869deg);
        }
    }
    @keyframes spin-6 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3899deg);
        }
    }
    @keyframes spin-7 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3929deg);
        }
    }
    @keyframes spin-8 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3959deg);
        }
    }
    @keyframes spin-9 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-3989deg);
        }
    }
    @keyframes spin-10 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-4019deg);
        }
    }
    @keyframes spin-11 {
        0% {
            transform: rotateX(30deg);
        }
        100% {
            transform: rotateX(-4049deg);
        }
    }
</style>
