---
import Page from "../../layouts/Page.astro";

const jdev = false;
---

<Page title="Jump">
  <dialog id="resultsDialog">
    <h1>Game Over</h1>
    <p>Score: <span id="res-score"></span></p>
    <p>Best: <span id="res-best"></span></p>
    <button class="restart">Restart</button>
  </dialog>
  <dialog id="pauseDialog">
    <h1>Paused</h1>
    <button id="resume">Resume</button>
  </dialog>
  <div id="opts">
    <label id="lbl" for="obs">Options:</label>
    <select id="obs">
      <option id="flat">Cars</option>
      <option id="on">Steps</option>
      <option id="over">Gaps</option>
    </select>
    <!-- <button id="play">Play</button> -->
    <h3 id="lvl">Lvl 0</h3>
    <h3 id="jumps">Score 0</h3>
    <h3 id="best">Best 0</h3>
    <h3 id="lives">Lives 3</h3>
    {jdev && <h3 id="dt">dt 0</h3>}
    <button id="btnGo">Pause</button>
  </div>

  <div id="game">
    <div class="bg" id="back"></div>
    <div class="bg" id="back2"></div>
    <div class="bg" id="far"></div>
    <div class="bg" id="far2"></div>
    <div class="bg" id="mid"></div>
    <div class="bg" id="mid2"></div>
    <div class="bg" id="near"></div>
    <div class="bg" id="near2"></div>
    <div class="bg" id="top"></div>
    <div class="bg" id="top2"></div>
    <!-- <div id="floor"></div> -->
    <!-- <div id="hole"></div> -->
    <div id="car"></div>
    <div id="player"></div>
    <!-- <div id="obstacle"></div> -->
  </div>

  <style>
    :root {
      --jump-y: -200px;
    }

    @keyframes swipe {
      0% {
        transform: translateX(0);
      }
      100% {
        transform: translateX(-50%);
      }
    }

    /* @keyframes swipe2 {
      0% {
        transform: translateX(100%);
      }
      100% {
        transform: translateX(50%);
      }
    } */

    body,
    main {
      overflow-x: hidden;
    }

    #game {
      margin: auto;
      position: relative;
      height: 348px;
      width: 576px;
      overflow: hidden;
      background: var(--color-bg-alt);
    }

    #floor {
      position: absolute;
      width: 100%;
      height: 1rem;
      bottom: 0;
      background-color: navy;
      overflow: hidden;
    }

    #floor.good {
      background-color: green;
    }

    #floor.fail {
      background-color: brown;
    }

    .bg {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      width: calc(2 * 576px);
      height: 324px;
      background-size: contain;
      background-repeat: repeat-x;
      overflow: hidden;
    }

    #back {
      animation: swipe linear 64s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/1.png");
    }
    /* #back2 {
      animation: swipe2 linear 64s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/1.png");
    } */

    #far {
      animation: swipe linear 32s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/2.png");
    }
    /* #far2 {
      animation: swipe2 linear 32s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/2.png");
    } */
    #mid {
      animation: swipe linear 12s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/3.png");
    }
    /* #mid2 {
      animation: swipe2 linear 12s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/3.png");
    } */
    #near {
      animation: swipe linear 6s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/4.png");
    }
    /* #near2 {
      animation: swipe2 linear 6s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/4.png");
    } */
    #top {
      animation: swipe linear 2s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/5.png");
    }
    /* #top2 {
      animation: swipe2 linear 2s infinite;
      background-image: url("/assets/free-city-backgrounds-pixel-art/city-1/5.png");
    } */

    #back.paused,
    #far.paused,
    #mid.paused,
    #near.paused,
    #top.paused {
      animation-play-state: paused;
      /* animation: none; */
    }

    #lbl {
      font-size: larger;
      color: var(--color-text);
    }

    #opts {
      display: flex;
      gap: 1rem;
      align-items: center;
      margin-bottom: 0.5rem;
    }

    #opts:has(#up:checked) + #game #level {
      background-color: deepskyblue;
    }
    #opts:has(#over:checked) + #game #level {
      background-color: darkblue;
    }
    #opts:has(#on:checked) + #game #level {
      background-color: darkslateblue;
    }

    #obs {
      cursor: pointer;
      padding: 0.5rem;
      border-radius: 0.25rem;
      background-color: var(--color-bg-alt);
      color: var(--color-text);
      font-size: medium;
      border: 1px solid var(--color-text);
      height: 2.5rem;
      overflow: hidden;
    }

    #hole {
      position: absolute;
      bottom: -80%;
      right: -400px;
      width: 400px;
      height: 100%;
      background: var(--color-text);
      transition: none;
    }

    #car {
      position: absolute;
      bottom: 0;
      right: -64px;
      width: 64px;
      height: 64px;
      background-image: url("/assets/car.svg");
      background-size: contain;
      transition: none;
    }

    #obstacle {
      position: absolute;
      bottom: 20%;
      right: -200px;
      width: 50px;
      height: 50px;
      background: var(--color-accent-alt);
      rotate: 45deg;
      transition: none;
      z-index: 2;
    }

    #car.jump {
      right: 150%;
      transition: all 1s ease-in-out;
    }

    #hole.jump {
      right: 150%;
      transition: all 1s ease-in-out;
    }

    #obstacle.jump {
      right: 170%;
      transition: all 1s ease-in-out;
    }

    #player {
      position: absolute;
      bottom: 0;
      left: 30%;
      width: 2rem;
      height: 2rem;
      background: var(--color-accent);
      border-radius: 50%;
      transition: 0.5s cubic-bezier(0.33333, 0, 0.66667, 0.33333);
    }

    #player.jump {
      transition: 0.5s cubic-bezier(0.33333, 0.66667, 0.66667, 1);
      transform: translateY(var(--jump-y));
    }

    #player.squat {
      transition: 0.5s ease-in;
      height: 1.5rem;
      width: 3rem;
      left: 29%;
    }

    dialog {
      text-align: right;
      border-radius: 0.5rem;
      background-color: var(--color-bg-alt);
      color: var(--color-text);
    }

    dialog::backdrop {
      background: black;
      opacity: 0.5;
    }

    button {
      padding: 0.5rem;
      border-radius: 0.5rem;
      border: 2px solid var(--color-text);
      background-color: var(--color-bg);
      color: var(--color-text);
    }

    button:hover,
    button:focus {
      background-color: var(--color-accent);
    }
  </style>
  <script>
    const resBtn = document.getElementById("resume") as HTMLButtonElement;
    resBtn.addEventListener("click", resume);
    const root = document.documentElement;
    const go = document.getElementById("btnGo") as HTMLButtonElement;
    go.addEventListener("click", pause);
    const player = document.getElementById("player") as HTMLDivElement;
    const obstacle = document.getElementById("obstacle") as HTMLDivElement;
    const hole = document.getElementById("hole") as HTMLDivElement;
    const car = document.getElementById("car") as HTMLDivElement;
    const game = document.getElementById("game") as HTMLDivElement;
    game.addEventListener("mousedown", squat);
    game.addEventListener("mouseup", jump);
    document.addEventListener("keydown", squat);
    document.addEventListener("keyup", jump);
    // document.getElementById("play").addEventListener("click", play);
    // let jumpTimes = generateLevel();

    let isGameOver = false;
    let isPaused = false;
    let jump_time_ms = 0;
    let jump_start_ms = 0;
    let start_time = 0;
    let score = 0;
    const n = localStorage.getItem("best") || "0";
    let highscore = +n;
    if (!highscore) {
      highscore = 0;
    }
    const threshold = 500;

    function play() {
      start_time = performance.now();

      jump_time_ms = nextJump(true);

      // for (let i = 0; i < jumpTimes.length; i++) {
      //   setTimeout(() => {
      //     jump_time_ms = jumpTimes[i];
      //     let game = document.getElementById("game");
      //     let obstacle = document.createElement("div");
      //     obstacle.classList.add("jump");
      //     obstacle.classList.add("now");
      //     game.appendChild(obstacle);
      //     setTimeout(() => {
      //       obstacle.classList.remove("now");
      //     }, 500);
      //   }, jumpTimes[i]);
      // }
    }

    function generateLevel(lvl_num = 100) {
      let jumps_ms = [];
      for (let i = 0; i < Math.floor(Math.sqrt(lvl_num)); i++) {
        jumps_ms.push((Math.random() + i) * 1000);
      }
      console.log(jumps_ms);
      return jumps_ms;
    }

    function squat(event) {
      if (isPaused) {
        console.log("spaused");
        return;
      }
      if (
        player.classList.contains("squat") ||
        player.classList.contains("jump") ||
        player.classList.contains("fall")
      )
        return;
      if (
        event.key !== " " &&
        event.key !== "ArrowUp" &&
        event.key !== "w" &&
        event.button !== 0
      )
        return;
      jump_start_ms = performance.now();
      player.classList.add("squat");
      console.log("squat");
    }

    function jump(event) {
      if (isPaused) {
        console.log("jpaused");
        return;
      }
      if (
        player.classList.contains("jump") ||
        player.classList.contains("fall") ||
        !player.classList.contains("squat")
      ) {
        console.log("already jumping");
        return;
      }
      if (
        event.key !== " " &&
        event.key !== "ArrowUp" &&
        event.key !== "w" &&
        event.button !== 0
      )
        return;
      // console.log("jump");

      const t = performance.now();
      console.log(`t: ${t}, start: ${start_time}`);
      const h = calcJumpHeight(t);
      showJump(h);
      const isOk = judgeJump(t);

      if (isOk === null) {
        console.log("forgiven");
        return;
      }

      updateScore(isOk);
      jump_time_ms = nextJump(t);
      start_time = t;
    }

    function showJump(h) {
      root.style.setProperty("--jump-y", h + "rem"); // use css var to set jump height
      player.classList.remove("squat");
      player.classList.add("jump");
      setTimeout(() => {
        player.classList.remove("jump");
        player.classList.add("fall");
        setTimeout(() => {
          player.classList.remove("fall");
        }, 400);
      }, 600);
    }

    function calcJumpHeight(t) {
      const t_hold = t - jump_start_ms;
      let jh = Math.min(t_hold, 1800) / 50;
      jh = Math.min(jh, 16);
      jh = Math.max(jh, 10);
      // console.log(`jump_h: ${jh}`);
      return -jh;
    }

    function judgeJump(t) {
      const floor = document.getElementById("floor") as HTMLDivElement;
      // Check if jump was good
      const dt = t - jump_time_ms;
      const dt_div = document.getElementById("dt");
      if (dt_div) {
        dt_div.innerText = `dt: ${dt}`;
      }

      if (dt < -500) {
        return null;
      }

      const isGood = 105 < dt && dt < 365;

      if (isGood) {
        floor.classList.add("good");
        setTimeout(() => {
          floor.classList.remove("good");
        }, 400);
      } else if (score > 0) {
        floor.classList.add("fail");
        setTimeout(() => {
          floor.classList.remove("fail");
        }, 400);
      }

      // console.log(`isGood? ${isGood}\nt: ${t}, tj: ${jump_time_ms}\ndt: ${dt}`);
      return isGood;
    }

    function updateScore(isGood) {
      const jumps = document.getElementById("jumps") as HTMLHeadingElement;
      const best = document.getElementById("best") as HTMLHeadingElement;
      if (isGood) {
        score += 1;
      } else {
        score = 0;
      }
      jumps.innerText = `Score: ${score}`;
      if (score > highscore) {
        highscore = score;
        localStorage.setItem("best", highscore.toString());
      }
      best.innerText = `Best: ${highscore}`;
    }

    function nextJump(t) {
      // if (!isOk) return;
      //TODO scale by level
      let t_next = Math.random() * 2000 + 2000;
      console.log(`next jump in ${t_next}ms`);
      // setTimeout(() => {
      //   jump({ key: "w" });
      // }, t_next + 360); // 110 - 360 = safe
      setTimeout(() => {
        obstacle.classList.add("jump");
        hole.classList.add("jump");
        car.classList.add("jump");
      }, t_next);
      setTimeout(() => {
        obstacle.classList.remove("jump");
        hole.classList.remove("jump");
        car.classList.remove("jump");
      }, t_next + 1000);
      return t + t_next;
    }

    updateScore(false);

    function showResults() {
      const resultsDialog = document.getElementById(
        "resultsDialog",
      ) as HTMLDialogElement;
      resultsDialog.showModal();
    }

    const pauseDialog = document.getElementById(
      "pauseDialog",
    ) as HTMLDialogElement;
    const bgs = document.getElementsByClassName("bg");
    function pause() {
      isPaused = true;
      for (let i = 0; i < bgs.length; i++) {
        bgs[i].classList.add("paused");
      }
      pauseDialog.showModal();
    }

    function resume() {
      pauseDialog.close();
      for (let i = 0; i < bgs.length; i++) {
        bgs[i].classList.remove("paused");
      }
      isPaused = false;
    }
  </script>
</Page>
