---
import Page from "../../../layouts/Page.astro";
---

<Page title="Wordle">
  <div class="alert hide" data-alert></div>
  <div class="wrap">
    <div data-guess-grid class="guess-grid">
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
      <div class="tile"></div>
    </div>
    <div data-keyboard class="keyboard">
      <button class="key" data-key="Q">Q</button>
      <button class="key" data-key="W">W</button>
      <button class="key" data-key="E">E</button>
      <button class="key" data-key="R">R</button>
      <button class="key" data-key="T">T</button>
      <button class="key" data-key="Y">Y</button>
      <button class="key" data-key="U">U</button>
      <button class="key" data-key="I">I</button>
      <button class="key" data-key="O">O</button>
      <button class="key" data-key="P">P</button>
      <div class="space"></div>
      <button class="key" data-key="A">A</button>
      <button class="key" data-key="S">S</button>
      <button class="key" data-key="D">D</button>
      <button class="key" data-key="F">F</button>
      <button class="key" data-key="G">G</button>
      <button class="key" data-key="H">H</button>
      <button class="key" data-key="J">J</button>
      <button class="key" data-key="K">K</button>
      <button class="key" data-key="L">L</button>
      <div class="space"></div>
      <button data-enter class="key large sub">Enter</button>
      <button class="key" data-key="Z">Z</button>
      <button class="key" data-key="X">X</button>
      <button class="key" data-key="C">C</button>
      <button class="key" data-key="V">V</button>
      <button class="key" data-key="B">B</button>
      <button class="key" data-key="N">N</button>
      <button class="key" data-key="M">M</button>
      <button class="key large del">
        <svg
          class="svg-icon"
          viewBox="0 0 24 24"
          aria-labelledby="button-label"
          focusable="false"
        >
          <title id="button-label">Delete</title>
          <path
            fill="white"
            d="M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H7.07L2.4 12l4.66-7H22v14zm-11.59-2L14 13.41 17.59 17 19 15.59 15.41 12 19 8.41 17.59 7 14 10.59 10.41 7 9 8.41 12.59 12 9 15.59z"
          >
          </path>
        </svg>
      </button>
    </div>
  </div>

  <dialog>
    <form class="welcome grid" method="dialog">
      <h3>Welcome back! &#128075;</h3>
      <div class="pad">
        <p>You have a word in progress.</p>
        <p>Continue where you left off?</p>
      </div>
      <div class="flex pad">
        <button class="pad">Ok &#x1f607;</button>
        <button class="pad" value="restart">Restart &#x1f608;</button>
      </div>
    </form>
    <form class="congrats grid" method="dialog">
      <h3><strong><span id="cword"></span></strong></h3>
      <div class="pad">
        <p>You got it, nicely done!</p>
        <p>points</p>
      </div>
      <div class="flex pad">
        <button class="pad ok">Ok &#x1f607;</button>
        <button class="pad rst" value="restart">Restart &#x1f608;</button>
        <button class="pad new" value="new">New Word</button>
        <button class="pad slots" value="slots"
          ><a href="/games/slots">Back to Slots</a></button
        >
      </div>
    </form>
  </dialog>

  <script>
    import confetti from "canvas-confetti";
    import Words from "./words.ts";

    const init_wordle = () => {
      console.log("init");
      const WORD_LENGTH = 5;
      const FLIP_ANIMATION_DURATION = 500;
      const DANCE_ANIMATION_DURATION = 500;
      const keyboard = document.querySelector("[data-keyboard]") as HTMLElement;
      const alert = document.querySelector("[data-alert]") as HTMLElement;
      const guessGrid = document.querySelector(
        "[data-guess-grid]",
      ) as HTMLElement;

      const n = Math.floor(Math.random() * Words.targetWords.length);
      const state = { targetWord: "smell" }; //Words.targetWords[n]
      // Player is returning to the page on the same day
      const dialog = document.querySelector("dialog") as HTMLDialogElement;

      dialog.addEventListener("close", () => {
        const val = dialog.returnValue;
        delete dialog.dataset.state;
        console.log(val);

        switch (val) {
          case "restart":
            restartGame();
            break;

          default:
            loadGame();
            break;
        }
      });

      function loadTiles() {
        console.log("load tiles");

        const target = localStorage.getItem("target");
        if (target) {
          dialog.dataset.state = "welcome";
          dialog.showModal();
          state.targetWord = target;
          return;
        }

        if (url_params.has("refill")) {
          showAlert("Solve for more spins!", 3000);
          return;
        }

        const return_visit = localStorage.getItem("wordle-visit");
        if (return_visit) {
          showAlert("Welcome back!", 3000);
          return;
        }

        localStorage.setItem("wordle-visit", "true");
        showAlert("Welcome!", 3000);
      }

      function restartGame() {
        localStorage.removeItem("tiles");
      }

      function loadGame() {
        const tileElems = [...queryTiles("*")];
        const strTiles = localStorage.getItem("tiles");
        if (!strTiles) {
          return;
        }
        const letters = strTiles.split(" ");
        let words: string[] = [];
        letters.forEach((char, i, arr) => {
          // console.log(char)
          tileElems[i].dataset.letter = char;
          tileElems[i].textContent = char.toUpperCase();
          tileElems[i].dataset.state = "active";
          if ((i + 1) % 5 == 0) {
            const word = arr.slice(i - 4, i + 1).join("");
            // console.log(word)
            words.push(word);
          }
        });

        console.log(words);

        words.forEach((word, idx) => {
          // console.log(word)
          const results = judgeGuess(word, state.targetWord);
          const tiles = tileElems.slice(5 * idx, 5 * idx + 5);
          tiles.forEach((tile, idx) =>
            flipTile(tile, results[idx], (idx * FLIP_ANIMATION_DURATION) / 2),
          );
        });

        setTimeout(() => checkDone(words[words.length - 1]), 1500);

        console.log("loaded");
      }

      function submitGuess() {
        const activeTiles = [...queryTiles('[data-state="active"]')];
        if (activeTiles.length !== WORD_LENGTH) {
          showAlert("Not enough letters");
          shakeTiles(activeTiles);
          return;
        }

        const guess = activeTiles.reduce((word, tile) => {
          return word + tile.dataset.letter;
        }, "");

        if (!guess) {
          return;
        }

        if (!Words.dictionary.includes(guess)) {
          showAlert("Not in word list");
          shakeTiles(activeTiles);
          return;
        }

        stopInteraction();
        saveTiles();

        const results = judgeGuess(guess, state.targetWord);
        activeTiles.forEach((tile, idx) => {
          flipTile(tile, results[idx], (idx * FLIP_ANIMATION_DURATION) / 2);
        });
        checkDone(guess);
      }

      function queryTiles(queryStr: string) {
        const elems = guessGrid.querySelectorAll(queryStr);
        const tiles: HTMLElement[] = [...elems]
          .filter((e) => {
            return e instanceof HTMLElement;
          })
          .map((e) => e as HTMLElement);
        return tiles;
      }

      function queryTile(queryStr: string) {
        const elem = guessGrid.querySelector(queryStr);
        if (elem instanceof HTMLElement) {
          return elem as HTMLElement;
        }
        return null;
      }

      function startInteraction() {
        // console.log("start");
        console.log(state.targetWord);
        const btnDel = document.querySelector(
          "button.del",
        ) as HTMLButtonElement;
        btnDel.addEventListener("click", deleteKey);
        document.addEventListener("click", handleMouseClick);
        document.addEventListener("keydown", handleKeyPress);
      }

      function stopInteraction() {
        // console.log("stop");
        document.removeEventListener("click", handleMouseClick);
        document.removeEventListener("keydown", handleKeyPress);
      }

      function handleMouseClick(e: any) {
        if (e.target.matches("[data-key]")) {
          pressKey(e.target.dataset.key);
          return;
        }

        if (e.target.matches("[data-enter]")) {
          submitGuess();
          return;
        }
      }

      function pressKey(key: string) {
        const activeTiles = queryTiles('[data-state="active"]');
        if (activeTiles.length >= WORD_LENGTH) return;
        const nextTile = queryTile(":not([data-letter])");
        if (nextTile == null) return;
        nextTile.dataset.letter = key.toLowerCase();
        nextTile.textContent = key;
        nextTile.dataset.state = "active";
      }

      function deleteKey() {
        const activeTiles = queryTiles('[data-state="active"]');
        // console.log(activeTiles);
        const lastTile = activeTiles[activeTiles.length - 1];
        // console.log(lastTile);
        if (lastTile == null) {
          // console.log("no last tile");
          return;
        }
        lastTile.textContent = "";
        delete lastTile.dataset.state;
        delete lastTile.dataset.letter;
      }

      function handleKeyPress(e: { key: string }) {
        if (e.key === "Enter") {
          submitGuess();
          return;
        }

        if (e.key === "Backspace" || e.key === "Delete") {
          deleteKey();
          return;
        }

        if (e.key.match(/^[a-z]$/)) {
          pressKey(e.key);
          return;
        }
      }

      function saveTiles() {
        const tileElems = [...queryTiles("[data-letter]")];
        const tiles = tileElems.map((tile, _i, _arr) => {
          return tile.dataset.letter;
        });
        const strTiles = tiles.join(" ");
        localStorage.setItem("tiles", strTiles);
        localStorage.setItem("target", state.targetWord);
      }

      function updateWins() {
        let game_wins = parseInt(localStorage.getItem("game-wins") || "0");
        game_wins += 1;
        localStorage.setItem("game-wins", game_wins.toString());
      }

      const url_params = new URLSearchParams(window.location.search);

      function newGame() {
        localStorage.removeItem("tiles");
        localStorage.removeItem("target");

        if (url_params.has("refill")) {
          dialog.classList.add("refill");
        }
        dialog.dataset.state = "congrats";
        dialog.showModal();

        // window.location.reload();
      }

      function checkDone(guess: string) {
        if (guess === state.targetWord) {
          showAlert("You Win", 5000);
          danceTiles();
          confetti();
          stopInteraction();
          updateWins();
          setTimeout(newGame, 5000);
          return;
        }

        const remainingTiles = guessGrid.querySelectorAll(
          ":not([data-letter])",
        );
        if (remainingTiles.length === 0) {
          showAlert(state.targetWord.toUpperCase());
          stopInteraction();
        }

        startInteraction();
      }

      function judgeGuess(guess: string, target: string) {
        if (guess === target) {
          return Array(5).fill("correct");
        }
        // default to wrong-location
        let results = Array(5).fill("wrong-location");
        let unused = target.split("");

        // mark matches as correct and misses as wrong
        for (let i = 0; i < guess.length; i++) {
          const guess_letter = guess.charAt(i);
          const target_letter = target.charAt(i);

          if (guess_letter === target_letter) {
            results[i] = "correct";
            unused[i] = "";
            continue;
          }

          const pos = target.indexOf(guess_letter);
          if (pos === -1) {
            results[i] = "wrong-location";
            unused[pos] = "";
          }
        }
        // mark used/spoken-for letters as wrong
        for (let i = 0; i < guess.length; i++) {
          if (results[i] === "wrong-location") {
            const guess_letter = guess.charAt(i);
            const pos = unused.indexOf(guess_letter);
            if (pos === -1) {
              results[i] = "wrong";
            } else {
              unused[pos] = "";
            }
          }
        }
        return results;
      }

      function flipTile(tile: HTMLElement, result: string, delay: number) {
        const letter = tile.dataset.letter;
        const key = keyboard.querySelector(`[data-key="${letter}"i]`);

        setTimeout(() => {
          tile.addEventListener(
            "animationend",
            () => {
              tile.classList.remove("flip");
              if (key) {
                key.classList.add(result);
              }
              tile.dataset.state = result;
            },
            { once: true },
          );
          tile.classList.add("flip");
        }, delay);

        // console.log("flip")
      }

      function showAlert(message: string | null, duration = 5000) {
        alert.textContent = message;
        alert.classList.remove("hide");

        if (duration == null) return;

        setTimeout(() => {
          alert.classList.add("hide");
        }, duration);
      }

      function shakeTiles(tiles: any[]) {
        tiles.forEach((tile) => {
          tile.addEventListener(
            "animationend",
            () => {
              tile.classList.remove("shake");
            },
            { once: true },
          );
          tile.classList.add("shake");
        });
      }

      function danceTiles() {
        const tiles = queryTiles("*");
        tiles.forEach((tile, index) => {
          setTimeout(
            () => {
              tile.addEventListener(
                "animationend",
                () => {
                  tile.classList.remove("dance");
                },
                { once: true },
              );
              tile.classList.add("dance");
            },
            (index * DANCE_ANIMATION_DURATION) / 5,
          );
        });
      }

      loadTiles();
      startInteraction();
    };

    init_wordle();
    // Runs after astro page load
    document.addEventListener("astro:after-swap", init_wordle);
  </script>
  <style>
    dialog {
      padding: 1.5rem;
      font-size: larger;
      text-align: center;
    }

    dialog .new,
    dialog .slots {
      display: none;
    }
    dialog .rst,
    dialog .ok {
      display: auto;
    }
    dialog.refill .new,
    dialog.refill .slots {
      display: auto;
    }
    dialog.refill .rst,
    dialog.refill .ok {
      display: none;
    }

    dialog[data-state="welcome"] .welcome {
      display: auto;
    }
    dialog[data-state="welcome"] .congrats {
      display: none;
    }
    dialog[data-state="congrats"] .welcome {
      display: none;
    }
    dialog[data-state="congrats"] .congrats {
      display: auto;
    }

    .flex {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
    }

    .wrap {
      display: flex;
      flex-direction: column;
      text-align: center;
      height: 100%;
      margin: 0;
      font-size: clamp(0.75rem, 2.5vmin, 2rem);
    }

    .keyboard {
      display: grid;
      grid-template-columns: repeat(20, minmax(auto, 1.25em));
      grid-auto-rows: 3em;
      gap: 0.3em;
      justify-content: center;
    }

    .key {
      font-size: inherit;
      grid-column: span 2;
      border: none;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: var(--color-bg-alt);
      color: var(--color-text);
      fill: var(--color-text);
      text-transform: uppercase;
      border-radius: 0.25em;
      cursor: pointer;
      user-select: none;
    }

    .key.large {
      grid-column: span 3;
    }

    .key > svg {
      width: 1.75em;
      height: 1.75em;
    }

    .key:hover,
    .key:focus {
      border: 0.1em solid var(--color-text);
    }

    .key.wrong {
      border: none;
      background-color: hsla(240, 3%, 43%, 0.8);
    }

    .key.wrong-location {
      border: none;
      background-color: hsla(49, 51%, 47%, 0.8);
    }

    .key.correct {
      border: none;
      background-color: hsla(115, 29%, 43%, 0.8);
    }

    .guess-grid {
      display: grid;
      justify-content: center;
      align-content: center;
      flex-grow: 1;
      grid-template-columns: repeat(5, 4em);
      grid-template-rows: repeat(6, 4em);
      gap: 0.25em;
      padding-bottom: 1rem;
    }

    .tile {
      font-size: 2em;
      color: var(--color-text);
      border: 0.1em solid hsl(240, 2%, 23%);
      border-radius: 0.1em;
      text-transform: uppercase;
      font-weight: bold;
      display: flex;
      justify-content: center;
      align-items: center;
      user-select: none;
    }

    .tile[data-state="active"] {
      border-color: hsl(200, 1%, 34%);
    }

    .tile[data-state="wrong"] {
      border: none;
      background-color: hsla(240, 3%, 43%, 0.8);
    }

    .tile[data-state="wrong-location"] {
      border: none;
      background-color: hsla(49, 51%, 47%, 0.8);
    }

    .tile[data-state="correct"] {
      border: none;
      background-color: hsla(115, 29%, 43%, 0.8);
    }

    .tile.shake {
      animation: shake 250ms ease-in-out;
    }

    .tile.dance {
      animation: dance 500ms ease-in-out;
    }

    .tile.flip {
      animation: flipover 250ms ease-in 2 alternate;
    }

    @keyframes flipover {
      100% {
        transform: rotateX(90deg);
      }
    }

    @keyframes shake {
      10% {
        transform: translateX(-5%);
      }

      30% {
        transform: translateX(5%);
      }

      50% {
        transform: translateX(-7.5%);
      }

      70% {
        transform: translateX(7.5%);
      }

      90% {
        transform: translateX(-5%);
      }

      100% {
        transform: translateX(0);
      }
    }

    @keyframes dance {
      20% {
        transform: translateY(-50%);
      }

      40% {
        transform: translateY(5%);
      }

      60% {
        transform: translateY(-25%);
      }

      80% {
        transform: translateY(2.5%);
      }

      90% {
        transform: translateY(-5%);
      }

      100% {
        transform: translateY(0);
      }
    }

    .alert.hide {
      opacity: 0;
    }

    .alert {
      position: fixed;
      top: 5vh;
      left: 50vw;
      transform: translateX(-50%);
      background-color: var(--color-bg-alt);
      z-index: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
      border-radius: 0 0 0.5rem 0.5rem;
      pointer-events: none;
      opacity: 1;
      transition: opacity 1s ease-in;
      margin-bottom: 0.5em;
    }

    .del {
      background-color: darkorange;
    }

    .sub {
      background-color: deepskyblue;
    }
  </style>
</Page>
