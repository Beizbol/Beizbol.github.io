---
import Page from "../../../layouts/Page.astro";
---

<Page title="Stack">
    <div class="wrap">
        <div class="wins">
            <div>Wins</div>
            <div>üéóÔ∏è <span id="bw">0</span></div>
            <div>üèÖ <span id="sw">0</span></div>
            <div>üèÜ <span id="gw">0</span></div>
        </div>
        <canvas id="canvas" width="290" height="514">
            <p>Canvas not supported</p>
        </canvas>

        <div class="ctls">
            &#128377;
            <kbd>touch</kbd> /
            <kbd>spacebar</kbd>
        </div>
    </div>
    <dialog id="gameOver">
        <form method="dialog">
            <h3>Game Over!</h3>
            <div class="flex">
                <div id="bronze" class="medal">-</div>
                <div id="silver" class="medal">-</div>
                <div id="gold" class="medal">-</div>
            </div>
            <button>Restart</button>
        </form>
    </dialog>
</Page>

<style>
    .wrap {
        margin: 0 auto;
        padding-top: 1rem;
        display: grid;
        gap: 1rem;
        place-items: center;
    }
    .wins {
        display: flex;
        justify-content: space-around;
        width: 100%;
    }
    .ctls {
        margin-right: 1rem;
    }

    #canvas {
        background-color: black;
    }
    dialog button {
        float: right;
        margin-top: 1rem;
        padding: 0.5rem 1rem;
    }
    dialog h3 {
        text-align: center;
    }
    .medal {
        height: 4rem;
        width: 4rem;
        display: grid;
        place-items: center;
        background-color: aqua;
        font-size: x-large;
        border-radius: 0.5rem;
        background-color: #8888;
    }
    .flex {
        display: flex;
        gap: 0.5rem;
    }
</style>

<script>
    import confetti from "canvas-confetti";

    function init_stack_game() {
        const size = 32;
        const pad = 2;
        const w = 9;
        const h = 16;
        const grid = Array.from({ length: h }, () => new Array(w).fill(false));
        const movers = [3, 4, 5];
        let y = h - 1;
        grid[y][3] = true;
        grid[y][4] = true;
        grid[y][5] = true;
        y -= 1;
        let isL = true;
        let place = false;
        let dt = 200; //152;
        let timer = 15;
        let isOff = true;
        let win = 0;

        const ON = {
            bg: "#102",
            cell: "#f02",
            grid: "#208",
            bronze: "#941",
            silver: "#999",
            gold: "#b80",
            bronzeW: "#b62",
            silverW: "#bbb",
            goldW: "#FC0",
        };

        const OFF = {
            bg: "#001",
            cell: "#300",
            grid: "#113",
            bronze: "#321",
            silver: "#444",
            gold: "#540",
            bronzeW: "#b62",
            silverW: "#aaa",
            goldW: "#d90",
        };

        let colors = isOff ? OFF : ON;

        const dialog = document.getElementById("gameOver") as HTMLDialogElement;

        const canvas = document.getElementById("canvas") as HTMLCanvasElement;
        const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;

        document.addEventListener("keydown", (e) => {
            switch (e.key) {
                case " ":
                    e.preventDefault();
                    if (isOff) {
                        isOff = false;
                    } else {
                        place = true;
                    }
                    break;

                default:
                    break;
            }
        });

        canvas.addEventListener("touchstart", () => {
            if (isOff) {
                isOff = false;
            } else {
                place = true;
            }
        });

        const bw = document.getElementById("bw") as HTMLSpanElement;
        bw.innerText = localStorage.getItem("stack-wins-bronze") || "0";
        const sw = document.getElementById("sw") as HTMLSpanElement;
        sw.innerText = localStorage.getItem("stack-wins-silver") || "0";
        const gw = document.getElementById("gw") as HTMLSpanElement;
        gw.innerText = localStorage.getItem("stack-wins-gold") || "0";
        let wins = {
            b: parseInt(bw.innerText),
            s: parseInt(sw.innerText),
            g: parseInt(gw.innerText),
        };

        const bronze = document.getElementById("bronze") as HTMLDivElement;
        const silver = document.getElementById("silver") as HTMLDivElement;
        const gold = document.getElementById("gold") as HTMLDivElement;

        const game_over = () => {
            console.log("game over");
            isOff = true;
            if (win >= 1) {
                bronze.innerText = "üéóÔ∏è";
                wins.b += 1;
            }
            if (win >= 2) {
                silver.innerText = "üèÖ";
                wins.s += 1;
            }
            if (win === 3) {
                gold.innerText = "üèÜ";
                wins.g += 1;
                confetti();
            }
            dialog.showModal();
        };

        dialog.onclose = () => {
            localStorage.setItem("stack-wins-bronze", wins.b.toString());
            localStorage.setItem("stack-wins-silver", wins.s.toString());
            localStorage.setItem("stack-wins-gold", wins.g.toString());
            bronze.innerText = "-";
            silver.innerText = "-";
            gold.innerText = "-";
            document.location.reload();
            // //reset the board
            // for (let i = 0; i < h; i++) {
            //     for (let j = 0; j < w; j++) {
            //         grid[i][j] = false;
            //     }
            // }
            // // reset the movers
            // while (movers.length > 0) {
            //     movers.pop();
            // }
            // movers.push(3, 4, 5);
            // // reset the state
            // y = h - 1;
            // grid[y][3] = true;
            // grid[y][4] = true;
            // grid[y][5] = true;
            // y -= 1;
            // isL = true;
            // place = false;
            // dt = 200; //152;
            // timer = 15;
            // isOff = true;
            // win = 0;
        };

        const update = () => {
            if (place) {
                place = false;
                // Clear Hanging Cells
                for (let i = 0; i < w; i++) {
                    if (grid[y][i] && !grid[y + 1][i]) {
                        grid[y][i] = false;
                        movers.pop();
                        console.log(movers.length);
                        if (movers.length === 0) {
                            game_over();
                            return;
                        }
                    }
                }
                //check bronze win
                if (y === 8 && grid[8].includes(true)) {
                    win = 1;
                }
                //check silver win
                if (y === 4 && grid[4].includes(true)) {
                    win = 2;
                }
                //check gold win
                if (y === 0 && grid[0].includes(true)) {
                    win = 3;
                }
                if (y === 0) {
                    game_over();
                    return;
                }
                timer -= 1;
                y -= 1;
                dt -= 8;
            }
            // Clear Mover Row
            for (let i = 0; i < w; i++) {
                grid[y][i] = false;
            }

            if (movers.at(0) === 0) {
                isL = false;
            }
            if (movers.at(-1) === w - 1) {
                isL = true;
            }
            // Move Movers
            for (let i = 0; i < movers.length; i++) {
                movers[i] += isL ? -1 : 1;
                grid[y][movers[i]] = true;
            }
        };

        const next = () => {
            if (!isOff) update();
            colors = isOff ? OFF : ON;
            // Draw
            ctx.fillStyle = colors.grid;
            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
            ctx.fillStyle = win > 2 ? colors.goldW : colors.gold;
            ctx.fillRect(0, 0, ctx.canvas.width, 34);
            ctx.fillStyle = win > 1 ? colors.silverW : colors.silver;
            ctx.fillRect(0, 128, ctx.canvas.width, 34);
            ctx.fillStyle = win > 0 ? colors.bronzeW : colors.bronze;
            ctx.fillRect(0, 256, ctx.canvas.width, 34);

            for (let i = 0; i < grid.length; i++) {
                for (let j = 0; j < grid[i].length; j++) {
                    const cell = grid[i][j];
                    const x = j * size + pad;
                    const y = i * size + pad;
                    ctx.fillStyle = cell ? colors.cell : colors.bg;
                    ctx.fillRect(x, y, size - pad, size - pad);
                }
            }

            setTimeout(next, dt);
        };

        next();
    }
    document.addEventListener("astro:page-load", init_stack_game);
</script>
